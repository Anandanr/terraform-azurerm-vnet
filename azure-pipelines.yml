# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest
steps:
- task: AzureCLI@2
  displayName: "Creating Terraform Azure Backend Resources"
  inputs:
    azureSubscription: 'TPC Azure Development 2(5a0855b9-426d-429e-83a9-ea7c4796e9a4)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      RESOURCE_GROUP_NAME=rg-otk-terraform
      STORAGE_ACCOUNT_NAME=tfotkpoctfstate
      CONTAINER_NAME=tfstate
      # Create resource group
      az group create --name $RESOURCE_GROUP_NAME --location "West Europe"
      # Create storage account
      az storage account create --resource-group $RESOURCE_GROUP_NAME --name $STORAGE_ACCOUNT_NAME --sku Standard_LRS --encryption-services blob
      # Get storage account key
      ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $STORAGE_ACCOUNT_NAME --query [0].value -o tsv)
      # Create blob container
      az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY
      echo "tf_storage_account_name: $STORAGE_ACCOUNT_NAME"
      echo "tf_container_name: $CONTAINER_NAME"
      echo "access_key: $ACCOUNT_KEY"
      echo "tf_resource_group: $RESOURCE_GROUP_NAME"
- task: TerraformInstaller@0
  displayName: "Terraform Install"
  inputs:
    terraformVersion: 'latest'
- task: TerraformCLI@0
  displayName: "Terraform init"
  inputs:
    command: 'init'
    backendType: 'azurerm'
    backendServiceArm: 'TPC Azure Development 2(5a0855b9-426d-429e-83a9-ea7c4796e9a4)'
    ensureBackend: true
    backendAzureRmResourceGroupName: 'rg-otk-terraform'
    backendAzureRmResourceGroupLocation: 'westeurope'
    backendAzureRmStorageAccountName: 'tfotkpoctfstate'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'otk-poc.tfstate'
    allowTelemetryCollection: false
- task: TerraformCLI@0
  displayName: "Terraform Validate"
  inputs:
    command: 'validate'
    allowTelemetryCollection: false
- task: TerraformCLI@0
  displayName: "Terraform Plan"
  inputs:
    command: 'plan'
    environmentServiceName: 'TPC Azure Development 2(5a0855b9-426d-429e-83a9-ea7c4796e9a4)'
    commandOptions: '-out=plan.out'
    allowTelemetryCollection: false
    publishPlanResults: 'TerraformPlanOutput'
- task: TerraformCLI@0
  displayName: "Apply Terraform Plan"
  inputs:
    command: 'apply'
    environmentServiceName: 'TPC Azure Development 2(5a0855b9-426d-429e-83a9-ea7c4796e9a4)'
    commandOptions: '-auto-approve plan.out'
    allowTelemetryCollection: false
